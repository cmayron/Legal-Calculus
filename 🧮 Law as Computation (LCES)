# **üßÆ Law as Computation (LCES)**

# ‚ö†Ô∏è Callout (Not legal advice): Educational framework to structure rules, surface ambiguity, and build an auditable record.

# üí° TL;DR (Callout): Encode the computable parts of law; clearly mark Human-Judgment Zones. Every output ships with a trace: Inputs ‚Üí Steps ‚Üí Result ‚Üí Review hooks.

# **Core Thesis**

- Some rules are effectively algorithms (deadlines, thresholds, benefit formulas) ‚Üí encode them.
- Keep standards (‚Äúreasonable,‚Äù ‚Äúequitable‚Äù) as prose + precedent + factors.
- Every determination yields a proof trace suitable for review/appeal and public archiving.
- Guardrails: transparency, explainability, bias checks, versioning.

# **‚ñ∏ Minimal Architecture (Toggle)**

1) Rule Spec (DSL/pseudocode + tests)

- Unit tests ‚Ä¢ Version + hash ‚Ä¢ Effective dates

2) Evidence Pipeline (normalized inputs)

- Timestamps ‚Ä¢ Source links ‚Ä¢ Hashes ‚Ä¢ Canonical formats (dates, currency)

3) Decision Function (deterministic)

- Emit intermediate steps, not just answers

4) Audit Layer (trace + appeal hooks)

- Human-readable trace ‚Ä¢ Reconsideration path ‚Ä¢ Appeal packet generator

5) Public Archive (memory)

- Publish spec, tests, anonymized traces for consistency

# **‚ñ∏ Examples (Toggle)**

A) Computation of Time (Deadlines)

Inputs: service date, method of service, tolling intervals, court holidays/weekend rule

Output: last permissible filing date + step-by-step explanation

B) Eligibility/Benefits & Tax

Inputs: income, dependents, qualifying events

Output: eligibility determination + calculation steps + unit tests

# üß≠ Callout ‚Äî Human-Judgment Zones

# Use factor checklists instead of code. Require: (1) cited evidence, (2) reasoned application of factors, (3) short conclusion tied to the record.

# **Determination Trace ‚Äî Template**

- Issue:
- Governing Rule (pinpoint):
- Inputs (with sources & hashes):
- Steps (numbered):
- Result:
- Human-Judgment Zone (if any): factors + short reasoning
- Next Actions: rehearing/appeal paths + dates
- Attachments: exhibits, test vector, spec version ID

# **Mini-Spec (Notion ‚ÄúCode‚Äù block, YAML)**

module: computation_of_time_v1
effective: 2025-09-24
inputs:
filing_event_date: date
service_date: date
method_of_service: [personal, mail, electronic]
tolling_events: [{start: date, end: date, reason: string}]
court_holidays: [date]
weekend_rule: boolean
logic:
base_deadline = service_date + rule_days(method_of_service)
for e in tolling_events:
base_deadline += days_between(e.start, e.end)
if weekend_rule and is_weekend_or_holiday(base_deadline, court_holidays):
base_deadline = next_business_day(base_deadline, court_holidays)
outputs:
last_day_to_file: base_deadline
trace:

- "Compute base days from service"
- "Add tolling intervals"
- "Adjust to next business day if needed"
review_hooks:
reconsideration: "New tolling evidence or holiday miscalc"
appeal: "Attach trace + governing text"
tests:
- name: mail_service_weekend_roll
input: {...}
expect: { last_day_to_file: "2025-10-13" }

# **Quick-Start Checklist**

- Pick one rule segment you can compute
- Draft pseudocode/DSL + 3‚Äì5 unit tests
- Normalize inputs + evidence (timestamps, sources, hashes)
- Produce one Determination Trace from real facts
- Publish spec + tests + anonymized trace to archive
- Run a basic bias check (vary realistic inputs across cohorts)

# **LCES Alignment**

- Filing = Protest. Format = Memory. The Record = Remedy.
- This module operationalizes Format as Memory: each step leaves auditable evidence.

# **‚ñ∏ Optional: ‚ÄúRule Specs‚Äù Database (Toggle)**

Properties:

- Status (Idea / Draft / Testing / Published)
- Version (Text) ‚Ä¢ Effective Date (Date) ‚Ä¢ Has Judgment Zone? (Checkbox)
- Link to Tests (URL) ‚Ä¢ Hash (Text)
Seed rows: computation_of_time_v1 (Testing), injunction_tailoring_v1 (Draft)